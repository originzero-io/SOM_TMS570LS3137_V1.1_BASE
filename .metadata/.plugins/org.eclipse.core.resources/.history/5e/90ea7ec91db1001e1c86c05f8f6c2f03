/**
 *  \file lwiplib.c
 *
 *  \brief lwip related initializations
 */
#include <ethernetif.h>
#include "lwiplib.h"
#include "lwip/dhcp.h"
#include "lwip/init.h"
#include "lwip/autoip.h"
#include "netif/ethernet.h"
#include "emac_driver.h"
#include "LwIP/prot/dhcp.h"

/******************************************************************************
 **                       INTERNAL VARIABLE DEFINITIONS
 ******************************************************************************/
/*
 ** The lwIP network interface structure for the HDK Ethernet MAC.
 */
struct netif gnetif;

/******************************************************************************
 **                          FUNCTION DEFINITIONS
 ******************************************************************************/

/**
 *
 * \brief Initializes the lwIP TCP/IP stack.
 *
 * \param instNum  The instance index of the EMAC module
 * \param macArray Pointer to the MAC Address
 * \param ipAddr   The IP address to be used 
 * \param netMask  The network mask to be used 
 * \param gwAddr   The Gateway address to be used 
 * \param ipMode   The IP Address Mode.
 *        ipMode can take the following values\n
 *             IPADDR_USE_STATIC - force static IP addressing to be used \n
 *             IPADDR_USE_DHCP - force DHCP with fallback to Link Local \n
 *             IPADDR_USE_AUTOIP - force  Link Local only
 *
 * This function performs initialization of the lwIP TCP/IP stack for the
 * HDK EMAC, including DHCP and/or AutoIP, as configured.
 *
 * \return IP Address.
 */

results_enum_t lwip_init_sync(uint8_t instance_number, uint8_t *mac_address,
                              uint8_t *ip_address_array,
                              uint8_t *net_mask_array,
                              uint8_t *gateway_address_array, uint8_t ip_mode)
{
    results_enum_t return_value = RESULT_SUCCESS;

    ip4_addr_t *ipadd_p = NULL_PTR, *netmask_p = NULL_PTR, *gw_p = NULL_PTR;

    if (ip_mode == IPADDR_USE_STATIC)
    {
        ip4_addr_t ipaddr, netmask, gw;

        IP4_ADDR(&ipaddr, ip_address_array[0], ip_address_array[1],
                 ip_address_array[2], ip_address_array[3]);
        IP4_ADDR(&netmask, net_mask_array[0], net_mask_array[1],
                 net_mask_array[2], net_mask_array[3]);
        IP4_ADDR(&gw, gateway_address_array[0], gateway_address_array[1],
                 gateway_address_array[2], gateway_address_array[3]);

        ipadd_p = &ipaddr;
        netmask_p = &netmask;
        gw_p = &gw;
    }

    ethernetif_set_mac_address(mac_address);

    if (NULL_PTR
            == netif_add(&gnetif, ipadd_p, netmask_p, gw_p,
                         &hdkif_data[instance_number], ethernetif_init,
                         tcpip_input))
    {
        return RESULT_ERR_NETIF;
    }
    else
    {
        netif_set_default(&gnetif);
        netif_set_up(&gnetif);
        netif_set_link_up(&gnetif);
    }

    netif_set_default(&gnetif);
    netif_set_up(&gnetif);

    if (ip_mode == IPADDR_USE_DHCP)
    {
#if LWIP_DHCP
        err_t dhcp_status = ERR_OK;

        dhcp_status = dhcp_start(&gnetif);
            if (ERR_OK != dhcp_status)
            {
                return_value = RESULT_ERR_DHCP;
                break;
            }
            else
            {
                //return RESULT_SUCCESS;
            }
        while (!dhcp_supplied_address(&gnetif))
        {

            volatile int i = 50;

            struct dhcp *dhcp;
            do
            {
                dhcp = netif_dhcp_data(&gnetif);

                //log_printf("dhcp status is: %d\n\r", dhcp->state);

                osDelay(100);
            }
            while (!((dhcp->state == DHCP_STATE_BOUND)
                    || (dhcp->state == DHCP_STATE_RENEWING)
                    || (dhcp->state == DHCP_STATE_REBINDING)) && --i); // Wait for DHCP to bind
        }
#endif
    }
    else if (ip_mode == IPADDR_USE_AUTOIP)
    {
#if LWIP_AUTOIP
        autoip_start(&gnetif);
        while (gnetif.ip_addr.addr == 0) // Wait for AutoIP to bind
        {
            // As above, here you would pass time in your application
        }
        return_value = RESULT_SUCCESS;
#endif
    }
    else if (ip_mode == IPADDR_USE_STATIC)
    {
        return_value = RESULT_SUCCESS; // For static IP, we are already set
    }

    return return_value;
}

struct netif* lwip_get_hdkNetIF_p(void)
{
    return &gnetif;
}

/***************************** End Of File ***********************************/

